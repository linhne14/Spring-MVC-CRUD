spring.application.name=sso

# Server Configuration
server.port=8080

# Logging Configuration
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

# OAuth2 Client Configuration for Keycloak (Docker environment)
spring.security.oauth2.client.registration.keycloak.client-id=spring-boot-client
spring.security.oauth2.client.registration.keycloak.client-secret=MlHAjtXA44HTvf2mZK82aoNHtY3Db8tE
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8080/login/oauth2/code/keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email

# OAuth2 Provider Configuration for Keycloak (Using Docker service name)
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso
spring.security.oauth2.client.provider.keycloak.authorization-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# JWT Resource Server Configuration (Using Docker service name)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_URL:http://keycloak:8080}/realms/spring-boot-sso/protocol/openid-connect/certs

# Container-specific configurations for Docker environment
# Note: Keycloak will be accessible via service name 'keycloak' within Docker network